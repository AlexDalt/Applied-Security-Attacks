Q.1 The vendor of the attack target is concerned that news of this attack
    could scare off potential customers; they will make any alteration
    necessary (in software or hardware) to prevent the attack.  Explain the
    options they have, and which one you would recommend.

	The weakness in the vendors implimentation comes from the variability
	in execution time due to the execution (or not) of conditional
	branches. One option to combat this is use masking to remove all
	branching statments and use a 'mask' to correct for the difference
	a branching statement would make. For example in the Montgomery
	algorithm...

	r <- 0
	for i = 0 upto lN-1 step +1 do
		ui <- (r0 + yi * x0) * w (mod b)
		r  <- (r + yi * x + ui * N)/b
	end
	var <- floor(r/N)  		// therefore is 1 if r>=N, and 0 otherwise
	r <- r - var * N
	return r

	This removes all branching statements at the cost of optimisation.
	Everytime it runs it runs in the worst possible time, but the time
	is consistent. The branching in the exponentiation algorithm can be
	removed in a similar manner.

	If working in hardware one could modify the logic unit performing
	the multiplication (and reduction) and ensure it always completes
	computation in constant time, and therefore force a constraint on
	the execution time. Working in hardware is a more thorough defence
	as one could have consistent execution time almost to the clock
	cycle, but software alterations are a less demanding and costly
	change but are not guaranteed to completely standardise execution
	time (with unpredictable caching and compiler optimisations). If
	the vendors means are limitless I would recommend a hardware
	change, but if the vendor is focussed on the consumer market
	where cryptography exists as a deterrent, software will suffice.

Q.2 The vendor of the attack target is concerned that a similar attack may
    also apply to their implementation of ElGamal encryption.  Explain the
    potential for such an attack, and how it differs wrt.  the case of RSA.

	In ElGamal encryption, the decryption step is

	m <- c2 * c1 ^ -x

	if left-to-right binary exponentiation is employed, with Montgomery
	multiplication, similar information will be leaked from timing
	variances. Admittedly the information will have a higher variance
	due to the noise produced by the additional arithmetic steps, but a
	very similar attack to RSA could be formulated for ElGamal.

	a <- 1
	for d = (bit length of -x) to 0 step -1 do
		a <- a * a 			(with Montgomery)
		if bit d of -x is 1 then
			a <- a * c2 	(with Montgomery)	
	a <- a * c1				(with Montgomery)
	return a

	A left-to-right exponentiation algorithm (with the added
	multiplication step) for the decryption step in the ElGamal
	cryptosystem is detailed above. There are 3 Montgomery
	multiplications, and taking care about the third, the first two can
	be attacked in a very similar way to RSA to leak information about -x.

Q.4 Numerous factors might produce noise within measurements of execution
    time: based on the given attack target and context, outline at least
    two examples.

	Due to the demands on a machine context switching may be required,
	in which case execution time depends on the other processes running
	on the machine. There could be some minor influences from the
	environment; radiation flipping bits where it shouldn't, or heat
	forcing safety measures to throttle the CPU. But other programs
	sharing the CPU will have the largest effect on execution time.

Q.7 Imagine the attack target vendor asks you to update the implementation
    of binary exponentiation with a windowed alternative.  Which algorithm
    would you recommend they use?  Discuss the advantages/disadvantages of
    your choice in terms of latency, memory footprint, and (side-channel)
    security.

	The two main options are the 2^k-ary-fixed method and the sliding 
	window method.

	The 2^k-ary-fixed method for a base x and exponent y, involves setting
	t <- 1, then until you've covered the entire exponent you take the
	k most significant bits of y, set them to be the k-bit integer y',
	then setting t <- t ^ (2^k), t <- t * x^y'. When the whole exponent
	has been covered return t.

	The sliding window method is similar to the fixed method. As before
	you set t <- 1 but instead of evenly seperating out the exponent into
	k-bit chunks you scan down the exponent (from the most significant
	bit) for a 1, then you look k bits down the exponent (or at the least
	significant bit if your window size extends beyond the least
	significant bit) and check for another 1, if it's a 0 you reduce the
	window size by 1, this continues until you have a y' with a most 
	significant bit of 1 and a least significant bit of 1 of bit-length l.
	At which point t <- t ^ (2^l), t <- t * (x ^ floor((y'-1)/2)). This
	continues until the whole exponent has been covered.

	The fixed method is much less efficient than the sliding window
	method, as the sliding window method performs fewer (or the same
	number of) computations that the fixed method does, if optimising for
	latency one would choose this method. The fixed method takes up less
	memory, due to the reduced number of intermediary variables. The most
	secure method against a side-channel attack is the fixed window method.
	The sliding window method has an optomised run time based on the
	exponent but therein lies it's security flaw, in optimising the number
	of arithmetic operations based on the exponent you are leaking
	information about it. The execution time correlates to the number of
	arithmetic operations, and that leaks information about the number of
	windows required for the exponentiation. 
